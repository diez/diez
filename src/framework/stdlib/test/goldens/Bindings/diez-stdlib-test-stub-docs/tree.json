[
  {
    "type": "Bindings",
    "name": "Bindings",
    "examples": {},
    "id": "/Bindings",
    "comments": {
      "type": ""
    },
    "properties": {
      "image": {
        "type": "Image",
        "name": "image",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> <span class=\"token function\">UIImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> imageView <span class=\"token operator\">=</span> <span class=\"token function\">UIImageView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nimageView<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> image\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIImage <span class=\"token operator\">*</span> _Nullable image <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIImage dez_imageWithDEZImage<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIImageView <span class=\"token operator\">*</span>imageView <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIImageView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nimageView<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIImage",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image\n\n<span class=\"token keyword\">val</span> imageView<span class=\"token operator\">:</span> ImageView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to an ImageView.</span>\nimageView<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImageView</span> imageView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to an ImageView.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>imageView<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "ImageView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">loadBackgrounImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadBackgroundImage</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "View",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image\n\n<span class=\"token keyword\">val</span> textView<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">loadLeftDrawable</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadLeftDrawable</span><span class=\"token punctuation\">(</span>textView<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image\n\n<span class=\"token keyword\">val</span> toolbar<span class=\"token operator\">:</span> Toolbar <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a Toolbar.</span>\ntoolbar<span class=\"token punctuation\">.</span><span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Toolbar</span> toolbar <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a Toolbar.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>toolbar<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Toolbar",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">image-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": ".<span class=\"token function\">image-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>backgroundImageStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Image</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            },
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$image}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myImage<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>url"
                }
              ],
              "example": "Variables",
              "comment": "<p>An <code>Image</code> value can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/image",
        "comments": {
          "type": "<p>Provides an abstraction for raster images. With bindings, this component can embed images in multiple platforms in\naccordance with best practices. Images should provide pixel ratios for standard, @2x, @3x, and @4x with conventional\nfile naming. The availability of retina resolutions is expected to be a compile-time concern, and the &quot;src&quot; of the\nimage is expected to exist and provide an image with the specified dimensions.</p>\n",
          "instance": ""
        },
        "properties": {
          "file": {
            "type": "File",
            "name": "file",
            "examples": {},
            "id": "/Bindings/image/file",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/image/file#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/image%20with%20spaces.jpg"
              },
              "type": {
                "id": "/Bindings/image/file#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "file2x": {
            "type": "File",
            "name": "file2x",
            "examples": {},
            "id": "/Bindings/image/file2x",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/image/file2x#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/image%20with%20spaces@2x.jpg"
              },
              "type": {
                "id": "/Bindings/image/file2x#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "file3x": {
            "type": "File",
            "name": "file3x",
            "examples": {},
            "id": "/Bindings/image/file3x",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/image/file3x#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/image%20with%20spaces@3x.jpg"
              },
              "type": {
                "id": "/Bindings/image/file3x#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "file4x": {
            "type": "File",
            "name": "file4x",
            "examples": {},
            "id": "/Bindings/image/file4x",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/image/file4x#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/image%20with%20spaces@4x.jpg"
              },
              "type": {
                "id": "/Bindings/image/file4x#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "size": {
            "type": "Size2D",
            "name": "size",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>cgSize\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGSize <span class=\"token operator\">*</span>size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>cgSize<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CGSize",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>size\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Size2D</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Size2D",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">image-size-size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.image-size-size</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Size2d</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                }
              ]
            },
            "id": "/Bindings/image/size",
            "comments": {
              "type": "<p>Provides a two dimensional size.</p>\n<p>Usage: <code>size = Size2D.make(1920, 1080);</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "width": {
                "id": "/Bindings/image/size#width",
                "name": "width",
                "type": "Float",
                "comments": {
                  "instance": "<p>Size data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 246
              },
              "height": {
                "id": "/Bindings/image/size#height",
                "name": "height",
                "type": "Float",
                "comments": {
                  "instance": "<p>Size data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 246
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Size2D/size2d-detail.vue",
                "item": "Size2D/size2d-item.vue",
                "icon": "Size2D/size2d-icon.vue"
              }
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Image/image-detail.vue",
            "item": "Image/image-item.vue",
            "icon": "Image/image-icon.vue"
          }
        }
      },
      "missingImage": {
        "type": "Image",
        "name": "missingImage",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> <span class=\"token function\">UIImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>missingImage<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> imageView <span class=\"token operator\">=</span> <span class=\"token function\">UIImageView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nimageView<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> image\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIImage <span class=\"token operator\">*</span> _Nullable image <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIImage dez_imageWithDEZImage<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>missingImage<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIImageView <span class=\"token operator\">*</span>imageView <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIImageView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nimageView<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> image<span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIImage",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage\n\n<span class=\"token keyword\">val</span> imageView<span class=\"token operator\">:</span> ImageView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to an ImageView.</span>\nimageView<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getMissingImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImageView</span> imageView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to an ImageView.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>imageView<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "ImageView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">loadBackgrounImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getMissingImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadBackgroundImage</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "View",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage\n\n<span class=\"token keyword\">val</span> textView<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">loadLeftDrawable</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getMissingImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadLeftDrawable</span><span class=\"token punctuation\">(</span>textView<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage\n\n<span class=\"token keyword\">val</span> toolbar<span class=\"token operator\">:</span> Toolbar <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a Toolbar.</span>\ntoolbar<span class=\"token punctuation\">.</span><span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Image</span> image <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getMissingImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Toolbar</span> toolbar <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a Toolbar.</span>\n<span class=\"token class-name\">ImageKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadIcon</span><span class=\"token punctuation\">(</span>toolbar<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Toolbar",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">missing-image-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": ".<span class=\"token function\">missing-image-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">,</span> missingImage<span class=\"token punctuation\">.</span>backgroundImageStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Image</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            },
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$missing-image}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--missing-image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myImage<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> missingImage<span class=\"token punctuation\">.</span>url"
                }
              ],
              "example": "Variables",
              "comment": "<p>An <code>Image</code> value can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/missingImage",
        "comments": {
          "type": "<p>Provides an abstraction for raster images. With bindings, this component can embed images in multiple platforms in\naccordance with best practices. Images should provide pixel ratios for standard, @2x, @3x, and @4x with conventional\nfile naming. The availability of retina resolutions is expected to be a compile-time concern, and the &quot;src&quot; of the\nimage is expected to exist and provide an image with the specified dimensions.</p>\n",
          "instance": ""
        },
        "properties": {
          "file": {
            "type": "File",
            "name": "file",
            "examples": {},
            "id": "/Bindings/missingImage/file",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/missingImage/file#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/unexistent-image-fallback-test.jpg"
              },
              "type": {
                "id": "/Bindings/missingImage/file#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "file2x": {
            "type": "File",
            "name": "file2x",
            "examples": {},
            "id": "/Bindings/missingImage/file2x",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/missingImage/file2x#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/unexistent-image-fallback-test@2x.jpg"
              },
              "type": {
                "id": "/Bindings/missingImage/file2x#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "file3x": {
            "type": "File",
            "name": "file3x",
            "examples": {},
            "id": "/Bindings/missingImage/file3x",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/missingImage/file3x#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/unexistent-image-fallback-test@3x.jpg"
              },
              "type": {
                "id": "/Bindings/missingImage/file3x#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "file4x": {
            "type": "File",
            "name": "file4x",
            "examples": {},
            "id": "/Bindings/missingImage/file4x",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/missingImage/file4x#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/unexistent-image-fallback-test@4x.jpg"
              },
              "type": {
                "id": "/Bindings/missingImage/file4x#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "image"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "size": {
            "type": "Size2D",
            "name": "size",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>cgSize\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGSize <span class=\"token operator\">*</span>size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>cgSize<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CGSize",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>missingImage<span class=\"token punctuation\">.</span>size\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Size2D</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getMissingImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Size2D",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">missing-image-size-size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.missing-image-size-size</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> missingImage<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Size2d</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                }
              ]
            },
            "id": "/Bindings/missingImage/size",
            "comments": {
              "type": "<p>Provides a two dimensional size.</p>\n<p>Usage: <code>size = Size2D.make(1920, 1080);</code>.</p>\n",
              "instance": "<p>Responsive image data.</p>\n"
            },
            "properties": {
              "width": {
                "id": "/Bindings/missingImage/size#width",
                "name": "width",
                "type": "Float",
                "comments": {
                  "instance": "<p>Size data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              },
              "height": {
                "id": "/Bindings/missingImage/size#height",
                "name": "height",
                "type": "Float",
                "comments": {
                  "instance": "<p>Size data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Size2D/size2d-detail.vue",
                "item": "Size2D/size2d-item.vue",
                "icon": "Size2D/size2d-icon.vue"
              }
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Image/image-detail.vue",
            "item": "Image/image-item.vue",
            "icon": "Image/image-icon.vue"
          }
        }
      },
      "lottie": {
        "type": "Lottie",
        "name": "lottie",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Lottie</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> lottie <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>lottie\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">AnimationView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>lottie<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">@</span>import Lottie<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLottie <span class=\"token operator\">*</span>lottie <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>lottie<span class=\"token punctuation\">;</span>\n\nAnimationView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>AnimationView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view dez_loadLottie<span class=\"token punctuation\">:</span>lottie<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "AnimationView",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> lottie <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>lottie\n\n<span class=\"token keyword\">val</span> animationView<span class=\"token operator\">:</span> LottieAnimationView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a LottieAnimationView.</span>\nanimationView<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>lottie<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Lottie</span> lottie <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getLottie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">LottieAnimationView</span> animationView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a LottieAnimationView.</span>\n<span class=\"token class-name\">LottieKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>animationView<span class=\"token punctuation\">,</span> lottie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "LottieAnimationView",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "JavaScript",
                  "snippet": "\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lottie-wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlottie<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          "
                }
              ],
              "example": "Usage",
              "comment": ""
            }
          ]
        },
        "id": "/Bindings/lottie",
        "comments": {
          "type": "<p>Provides an abstraction for <a href=\"https://airbnb.io/lottie/#/\">Lottie</a> animations.</p>\n",
          "instance": ""
        },
        "properties": {
          "file": {
            "type": "File",
            "name": "file",
            "examples": {},
            "id": "/Bindings/lottie/file",
            "comments": {
              "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
              "instance": "<p>Lottie data.</p>\n"
            },
            "properties": {
              "src": {
                "id": "/Bindings/lottie/file#src",
                "name": "src",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "assets/lottie.json"
              },
              "type": {
                "id": "/Bindings/lottie/file#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>File data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "raw"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "File/file-detail.vue",
                "item": "File/file-item.vue",
                "icon": "File/file-icon.vue"
              }
            }
          },
          "loop": {
            "id": "/Bindings/lottie#loop",
            "name": "loop",
            "type": "Boolean",
            "comments": {
              "instance": "<p>Lottie data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": true
          },
          "autoplay": {
            "id": "/Bindings/lottie#autoplay",
            "name": "autoplay",
            "type": "Boolean",
            "comments": {
              "instance": "<p>Lottie data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": true
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Lottie/lottie-detail.vue",
            "item": "Lottie/lottie-item.vue",
            "icon": "Lottie/lottie-icon.vue"
          }
        }
      },
      "typograph": {
        "type": "Typograph",
        "name": "typograph",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlabel<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nDEZLabel <span class=\"token operator\">*</span>label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZLabel alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>label applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Label",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> textField <span class=\"token operator\">=</span> <span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntextField<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nDEZTextField <span class=\"token operator\">*</span>textField <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZTextField alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>textField applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextField",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> textView <span class=\"token operator\">=</span> <span class=\"token function\">TextView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nDEZTextView <span class=\"token operator\">*</span>textView <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZTextView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>textView applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nDEZButton <span class=\"token operator\">*</span>button <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZButton alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>button applyTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Button",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> navigationBar <span class=\"token operator\">=</span> <span class=\"token function\">UINavigationBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnavigationBar<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributesWith</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nUINavigationBar <span class=\"token operator\">*</span>navigationBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UINavigationBar alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>navigationBar dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UINavigationBar Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> segmentedControl <span class=\"token operator\">=</span> <span class=\"token function\">UISegmentedControl</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nsegmentedControl<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributes</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nUISegmentedControl <span class=\"token operator\">*</span>segmentedControl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UISegmentedControl alloc<span class=\"token punctuation\">]</span> initWithItems<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token string\">@\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"Two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>segmentedControl dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UISegmentedControl Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token function\">UIBarButtonItem</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>plain<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributes</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nUIBarButtonItem <span class=\"token operator\">*</span>item <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIBarButtonItem alloc<span class=\"token punctuation\">]</span> initWithTitle<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> style<span class=\"token punctuation\">:</span>UIBarButtonItemStylePlain target<span class=\"token punctuation\">:</span>nil action<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>item dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIBarItem Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> attributedString <span class=\"token operator\">=</span> <span class=\"token function\">NSAttributedString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nNSAttribuedString <span class=\"token operator\">*</span>attributedString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSAttribuedString dez_stringWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> typograph<span class=\"token punctuation\">:</span>typograph<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "NSAttributedString",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">let</span> attributes <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>attributedStringAttributes\n<span class=\"token keyword\">let</span> attributedString <span class=\"token operator\">=</span> <span class=\"token function\">NSAttributedString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">:</span> attributes<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">;</span>\n\nNSDictionary<span class=\"token operator\">&lt;</span>NSAttributedStringKey<span class=\"token punctuation\">,</span> id<span class=\"token operator\">></span> <span class=\"token operator\">*</span>attributes <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>attributedStringAttributes<span class=\"token punctuation\">;</span>\nNSAttributedString <span class=\"token operator\">*</span>text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSAttributedString alloc<span class=\"token punctuation\">]</span> initWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> attributes<span class=\"token punctuation\">:</span>attributes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "NSAttributedString Attributes",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph\n\n<span class=\"token keyword\">val</span> textView<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Typograph</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getTypograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\n<span class=\"token class-name\">TypographKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>textView<span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">typograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.typograph</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myHeading<span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Typograph</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            }
          ]
        },
        "id": "/Bindings/typograph",
        "comments": {
          "type": "<p>Describes a typograph including specification of a font name (understood to specify both a font face and a font\nweight) as well as a font size in device-local units and a font color.</p>\n",
          "instance": ""
        },
        "properties": {
          "font": {
            "type": "Font",
            "name": "font",
            "examples": {},
            "id": "/Bindings/typograph/font",
            "comments": {
              "type": "<p>A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.</p>\n",
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {
              "file": {
                "type": "File",
                "name": "file",
                "examples": {},
                "id": "/Bindings/typograph/font/file",
                "comments": {
                  "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {
                  "src": {
                    "id": "/Bindings/typograph/font/file#src",
                    "name": "src",
                    "type": "String",
                    "comments": {
                      "instance": "<p>File data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "assets/SomeFont.ttf"
                  },
                  "type": {
                    "id": "/Bindings/typograph/font/file#type",
                    "name": "type",
                    "type": "String",
                    "comments": {
                      "instance": "<p>File data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "font"
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "File/file-detail.vue",
                    "item": "File/file-item.vue",
                    "icon": "File/file-icon.vue"
                  }
                }
              },
              "name": {
                "id": "/Bindings/typograph/font#name",
                "name": "name",
                "type": "String",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "SomeFont"
              },
              "fallbacks": {
                "id": "/Bindings/typograph/font",
                "name": "fallbacks",
                "type": "2",
                "properties": {},
                "isPrimitive": false,
                "value": [
                  {
                    "id": "/Bindings/typograph/font#fallbacks",
                    "name": "fallbacks",
                    "type": "String",
                    "comments": {
                      "instance": "<p>Font data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "Verdana"
                  },
                  {
                    "id": "/Bindings/typograph/font#fallbacks",
                    "name": "fallbacks",
                    "type": "String",
                    "comments": {
                      "instance": "<p>Font data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "serif"
                  }
                ],
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                }
              },
              "weight": {
                "id": "/Bindings/typograph/font#weight",
                "name": "weight",
                "type": "Float",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 700
              },
              "style": {
                "id": "/Bindings/typograph/font#style",
                "name": "style",
                "type": "String",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "normal"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": []
          },
          "fontSize": {
            "id": "/Bindings/typograph#fontSize",
            "name": "fontSize",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 50
          },
          "color": {
            "type": "Color",
            "name": "color",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "UIColor",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>typograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getTypograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Color",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/typograph/color",
            "comments": {
              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {
              "h": {
                "id": "/Bindings/typograph/color#h",
                "name": "h",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.16666666666666666
              },
              "s": {
                "id": "/Bindings/typograph/color#s",
                "name": "s",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              },
              "l": {
                "id": "/Bindings/typograph/color#l",
                "name": "l",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.5
              },
              "a": {
                "id": "/Bindings/typograph/color#a",
                "name": "a",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Color/color-detail.vue",
                "item": "Color/color-item.vue",
                "icon": "Color/color-icon.vue"
              }
            }
          },
          "iosTextStyle": {
            "id": "/Bindings/typograph#iosTextStyle",
            "name": "iosTextStyle",
            "type": "String",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "body"
          },
          "shouldScale": {
            "id": "/Bindings/typograph#shouldScale",
            "name": "shouldScale",
            "type": "Boolean",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": false
          },
          "lineHeight": {
            "id": "/Bindings/typograph#lineHeight",
            "name": "lineHeight",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": -1
          },
          "letterSpacing": {
            "id": "/Bindings/typograph#letterSpacing",
            "name": "letterSpacing",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "alignment": {
            "id": "/Bindings/typograph#alignment",
            "name": "alignment",
            "type": "String",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "natural"
          },
          "decoration": {
            "id": "/Bindings/typograph",
            "name": "decoration",
            "type": "2",
            "properties": {},
            "isPrimitive": false,
            "value": [],
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Typograph/typograph-detail.vue",
            "item": "Typograph/typograph-item.vue",
            "icon": "Typograph/typograph-icon.vue"
          }
        }
      },
      "tallTypograph": {
        "type": "Typograph",
        "name": "tallTypograph",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlabel<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nDEZLabel <span class=\"token operator\">*</span>label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZLabel alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>label applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Label",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> textField <span class=\"token operator\">=</span> <span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntextField<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nDEZTextField <span class=\"token operator\">*</span>textField <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZTextField alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>textField applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextField",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> textView <span class=\"token operator\">=</span> <span class=\"token function\">TextView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nDEZTextView <span class=\"token operator\">*</span>textView <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZTextView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>textView applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nDEZButton <span class=\"token operator\">*</span>button <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZButton alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>button applyTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Button",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> navigationBar <span class=\"token operator\">=</span> <span class=\"token function\">UINavigationBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnavigationBar<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributesWith</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nUINavigationBar <span class=\"token operator\">*</span>navigationBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UINavigationBar alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>navigationBar dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UINavigationBar Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> segmentedControl <span class=\"token operator\">=</span> <span class=\"token function\">UISegmentedControl</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nsegmentedControl<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributes</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nUISegmentedControl <span class=\"token operator\">*</span>segmentedControl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UISegmentedControl alloc<span class=\"token punctuation\">]</span> initWithItems<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token string\">@\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"Two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>segmentedControl dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UISegmentedControl Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token function\">UIBarButtonItem</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>plain<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributes</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nUIBarButtonItem <span class=\"token operator\">*</span>item <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIBarButtonItem alloc<span class=\"token punctuation\">]</span> initWithTitle<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> style<span class=\"token punctuation\">:</span>UIBarButtonItemStylePlain target<span class=\"token punctuation\">:</span>nil action<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>item dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIBarItem Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> attributedString <span class=\"token operator\">=</span> <span class=\"token function\">NSAttributedString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nNSAttribuedString <span class=\"token operator\">*</span>attributedString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSAttribuedString dez_stringWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> typograph<span class=\"token punctuation\">:</span>typograph<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "NSAttributedString",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">let</span> attributes <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>attributedStringAttributes\n<span class=\"token keyword\">let</span> attributedString <span class=\"token operator\">=</span> <span class=\"token function\">NSAttributedString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">:</span> attributes<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">;</span>\n\nNSDictionary<span class=\"token operator\">&lt;</span>NSAttributedStringKey<span class=\"token punctuation\">,</span> id<span class=\"token operator\">></span> <span class=\"token operator\">*</span>attributes <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>attributedStringAttributes<span class=\"token punctuation\">;</span>\nNSAttributedString <span class=\"token operator\">*</span>text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSAttributedString alloc<span class=\"token punctuation\">]</span> initWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> attributes<span class=\"token punctuation\">:</span>attributes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "NSAttributedString Attributes",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph\n\n<span class=\"token keyword\">val</span> textView<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Typograph</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getTallTypograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\n<span class=\"token class-name\">TypographKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>textView<span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">tall-typograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.tall-typograph</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myHeading<span class=\"token punctuation\">,</span> tallTypograph<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Typograph</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            }
          ]
        },
        "id": "/Bindings/tallTypograph",
        "comments": {
          "type": "<p>Describes a typograph including specification of a font name (understood to specify both a font face and a font\nweight) as well as a font size in device-local units and a font color.</p>\n",
          "instance": ""
        },
        "properties": {
          "font": {
            "type": "Font",
            "name": "font",
            "examples": {},
            "id": "/Bindings/tallTypograph/font",
            "comments": {
              "type": "<p>A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.</p>\n",
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {
              "file": {
                "type": "File",
                "name": "file",
                "examples": {},
                "id": "/Bindings/tallTypograph/font/file",
                "comments": {
                  "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {
                  "src": {
                    "id": "/Bindings/tallTypograph/font/file#src",
                    "name": "src",
                    "type": "String",
                    "comments": {
                      "instance": "<p>File data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "assets/SomeFont.ttf"
                  },
                  "type": {
                    "id": "/Bindings/tallTypograph/font/file#type",
                    "name": "type",
                    "type": "String",
                    "comments": {
                      "instance": "<p>File data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "font"
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "File/file-detail.vue",
                    "item": "File/file-item.vue",
                    "icon": "File/file-icon.vue"
                  }
                }
              },
              "name": {
                "id": "/Bindings/tallTypograph/font#name",
                "name": "name",
                "type": "String",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "SomeFont"
              },
              "fallbacks": {
                "id": "/Bindings/tallTypograph/font",
                "name": "fallbacks",
                "type": "2",
                "properties": {},
                "isPrimitive": false,
                "value": [
                  {
                    "id": "/Bindings/tallTypograph/font#fallbacks",
                    "name": "fallbacks",
                    "type": "String",
                    "comments": {
                      "instance": "<p>Font data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "Verdana"
                  },
                  {
                    "id": "/Bindings/tallTypograph/font#fallbacks",
                    "name": "fallbacks",
                    "type": "String",
                    "comments": {
                      "instance": "<p>Font data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "serif"
                  }
                ],
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                }
              },
              "weight": {
                "id": "/Bindings/tallTypograph/font#weight",
                "name": "weight",
                "type": "Float",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 700
              },
              "style": {
                "id": "/Bindings/tallTypograph/font#style",
                "name": "style",
                "type": "String",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "normal"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": []
          },
          "fontSize": {
            "id": "/Bindings/tallTypograph#fontSize",
            "name": "fontSize",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 50
          },
          "color": {
            "type": "Color",
            "name": "color",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "UIColor",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>tallTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getTallTypograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Color",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> tallTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> tallTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/tallTypograph/color",
            "comments": {
              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {
              "h": {
                "id": "/Bindings/tallTypograph/color#h",
                "name": "h",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              },
              "s": {
                "id": "/Bindings/tallTypograph/color#s",
                "name": "s",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              },
              "l": {
                "id": "/Bindings/tallTypograph/color#l",
                "name": "l",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              },
              "a": {
                "id": "/Bindings/tallTypograph/color#a",
                "name": "a",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Color/color-detail.vue",
                "item": "Color/color-item.vue",
                "icon": "Color/color-icon.vue"
              }
            }
          },
          "iosTextStyle": {
            "id": "/Bindings/tallTypograph#iosTextStyle",
            "name": "iosTextStyle",
            "type": "String",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "body"
          },
          "shouldScale": {
            "id": "/Bindings/tallTypograph#shouldScale",
            "name": "shouldScale",
            "type": "Boolean",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": false
          },
          "lineHeight": {
            "id": "/Bindings/tallTypograph#lineHeight",
            "name": "lineHeight",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 100
          },
          "letterSpacing": {
            "id": "/Bindings/tallTypograph#letterSpacing",
            "name": "letterSpacing",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 10
          },
          "alignment": {
            "id": "/Bindings/tallTypograph#alignment",
            "name": "alignment",
            "type": "String",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "natural"
          },
          "decoration": {
            "id": "/Bindings/tallTypograph",
            "name": "decoration",
            "type": "2",
            "properties": {},
            "isPrimitive": false,
            "value": [
              {
                "id": "/Bindings/tallTypograph#decoration",
                "name": "decoration",
                "type": "String",
                "comments": {
                  "instance": "<p>Typograph data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "underline"
              },
              {
                "id": "/Bindings/tallTypograph#decoration",
                "name": "decoration",
                "type": "String",
                "comments": {
                  "instance": "<p>Typograph data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "strikethrough"
              }
            ],
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Typograph/typograph-detail.vue",
            "item": "Typograph/typograph-item.vue",
            "icon": "Typograph/typograph-icon.vue"
          }
        }
      },
      "googleFontsTypograph": {
        "type": "Typograph",
        "name": "googleFontsTypograph",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> label <span class=\"token operator\">=</span> <span class=\"token function\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlabel<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nDEZLabel <span class=\"token operator\">*</span>label <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZLabel alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>label applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Label",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> textField <span class=\"token operator\">=</span> <span class=\"token function\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntextField<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nDEZTextField <span class=\"token operator\">*</span>textField <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZTextField alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>textField applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextField",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> textView <span class=\"token operator\">=</span> <span class=\"token function\">TextView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nDEZTextView <span class=\"token operator\">*</span>textView <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZTextView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>textView applyTypograph<span class=\"token punctuation\">:</span>typograph withTraitCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nDEZButton <span class=\"token operator\">*</span>button <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZButton alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>button applyTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Button",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> navigationBar <span class=\"token operator\">=</span> <span class=\"token function\">UINavigationBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnavigationBar<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributesWith</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nUINavigationBar <span class=\"token operator\">*</span>navigationBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UINavigationBar alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>navigationBar dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UINavigationBar Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> segmentedControl <span class=\"token operator\">=</span> <span class=\"token function\">UISegmentedControl</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nsegmentedControl<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributes</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nUISegmentedControl <span class=\"token operator\">*</span>segmentedControl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UISegmentedControl alloc<span class=\"token punctuation\">]</span> initWithItems<span class=\"token punctuation\">:</span><span class=\"token operator\">@</span><span class=\"token punctuation\">[</span><span class=\"token string\">@\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">@\"Two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>segmentedControl dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UISegmentedControl Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token function\">UIBarButtonItem</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>plain<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\nitem<span class=\"token punctuation\">.</span><span class=\"token function\">applyTitleAttributes</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nUIBarButtonItem <span class=\"token operator\">*</span>item <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIBarButtonItem alloc<span class=\"token punctuation\">]</span> initWithTitle<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> style<span class=\"token punctuation\">:</span>UIBarButtonItemStylePlain target<span class=\"token punctuation\">:</span>nil action<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>item dez_applyTitleAttributesWithTypograph<span class=\"token punctuation\">:</span>typograph forState<span class=\"token punctuation\">:</span>UIControlStateNormal traitCollection<span class=\"token punctuation\">:</span>nil<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIBarItem Title Text Attributes",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> attributedString <span class=\"token operator\">=</span> <span class=\"token function\">NSAttributedString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">:</span> typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nNSAttribuedString <span class=\"token operator\">*</span>attributedString <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSAttribuedString dez_stringWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> typograph<span class=\"token punctuation\">:</span>typograph<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "NSAttributedString",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">let</span> attributes <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>attributedStringAttributes\n<span class=\"token keyword\">let</span> attributedString <span class=\"token operator\">=</span> <span class=\"token function\">NSAttributedString</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ten\"</span><span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">:</span> attributes<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nTypograph <span class=\"token operator\">*</span>typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">;</span>\n\nNSDictionary<span class=\"token operator\">&lt;</span>NSAttributedStringKey<span class=\"token punctuation\">,</span> id<span class=\"token operator\">></span> <span class=\"token operator\">*</span>attributes <span class=\"token operator\">=</span> typograph<span class=\"token punctuation\">.</span>attributedStringAttributes<span class=\"token punctuation\">;</span>\nNSAttributedString <span class=\"token operator\">*</span>text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSAttributedString alloc<span class=\"token punctuation\">]</span> initWithString<span class=\"token punctuation\">:</span><span class=\"token string\">@\"Ten\"</span> attributes<span class=\"token punctuation\">:</span>attributes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "NSAttributedString Attributes",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph\n\n<span class=\"token keyword\">val</span> textView<span class=\"token operator\">:</span> TextView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\ntextView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>typograph<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Typograph</span> typograph <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getGoogleFontsTypograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">TextView</span> textView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a TextView.</span>\n<span class=\"token class-name\">TypographKt</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>textView<span class=\"token punctuation\">,</span> typograph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "TextView",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">google-fonts-typograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.google-fonts-typograph</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myHeading<span class=\"token punctuation\">,</span> googleFontsTypograph<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Typograph</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            }
          ]
        },
        "id": "/Bindings/googleFontsTypograph",
        "comments": {
          "type": "<p>Describes a typograph including specification of a font name (understood to specify both a font face and a font\nweight) as well as a font size in device-local units and a font color.</p>\n",
          "instance": ""
        },
        "properties": {
          "font": {
            "type": "Font",
            "name": "font",
            "examples": {},
            "id": "/Bindings/googleFontsTypograph/font",
            "comments": {
              "type": "<p>A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.</p>\n",
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {
              "file": {
                "type": "File",
                "name": "file",
                "examples": {},
                "id": "/Bindings/googleFontsTypograph/font/file",
                "comments": {
                  "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {
                  "src": {
                    "id": "/Bindings/googleFontsTypograph/font/file#src",
                    "name": "src",
                    "type": "String",
                    "comments": {
                      "instance": "<p>File data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": ""
                  },
                  "type": {
                    "id": "/Bindings/googleFontsTypograph/font/file#type",
                    "name": "type",
                    "type": "String",
                    "comments": {
                      "instance": "<p>File data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "remote"
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "File/file-detail.vue",
                    "item": "File/file-item.vue",
                    "icon": "File/file-icon.vue"
                  }
                }
              },
              "name": {
                "id": "/Bindings/googleFontsTypograph/font#name",
                "name": "name",
                "type": "String",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "Yesteryear"
              },
              "fallbacks": {
                "id": "/Bindings/googleFontsTypograph/font",
                "name": "fallbacks",
                "type": "2",
                "properties": {},
                "isPrimitive": false,
                "value": [
                  {
                    "id": "/Bindings/googleFontsTypograph/font#fallbacks",
                    "name": "fallbacks",
                    "type": "String",
                    "comments": {
                      "instance": "<p>Font data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": "sans-serif"
                  }
                ],
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                }
              },
              "weight": {
                "id": "/Bindings/googleFontsTypograph/font#weight",
                "name": "weight",
                "type": "Float",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 400
              },
              "style": {
                "id": "/Bindings/googleFontsTypograph/font#style",
                "name": "style",
                "type": "String",
                "comments": {
                  "instance": "<p>Font data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "normal"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": []
          },
          "fontSize": {
            "id": "/Bindings/googleFontsTypograph#fontSize",
            "name": "fontSize",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 15
          },
          "color": {
            "type": "Color",
            "name": "color",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "UIColor",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>googleFontsTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getGoogleFontsTypograph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Color",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> googleFontsTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> googleFontsTypograph<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/googleFontsTypograph/color",
            "comments": {
              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {
              "h": {
                "id": "/Bindings/googleFontsTypograph/color#h",
                "name": "h",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.45502645502645506
              },
              "s": {
                "id": "/Bindings/googleFontsTypograph/color#s",
                "name": "s",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              },
              "l": {
                "id": "/Bindings/googleFontsTypograph/color#l",
                "name": "l",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.8764705882352941
              },
              "a": {
                "id": "/Bindings/googleFontsTypograph/color#a",
                "name": "a",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Color/color-detail.vue",
                "item": "Color/color-item.vue",
                "icon": "Color/color-icon.vue"
              }
            }
          },
          "iosTextStyle": {
            "id": "/Bindings/googleFontsTypograph#iosTextStyle",
            "name": "iosTextStyle",
            "type": "String",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "body"
          },
          "shouldScale": {
            "id": "/Bindings/googleFontsTypograph#shouldScale",
            "name": "shouldScale",
            "type": "Boolean",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": false
          },
          "lineHeight": {
            "id": "/Bindings/googleFontsTypograph#lineHeight",
            "name": "lineHeight",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": -1
          },
          "letterSpacing": {
            "id": "/Bindings/googleFontsTypograph#letterSpacing",
            "name": "letterSpacing",
            "type": "Float",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "alignment": {
            "id": "/Bindings/googleFontsTypograph#alignment",
            "name": "alignment",
            "type": "String",
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "natural"
          },
          "decoration": {
            "id": "/Bindings/googleFontsTypograph",
            "name": "decoration",
            "type": "2",
            "properties": {},
            "isPrimitive": false,
            "value": [],
            "comments": {
              "instance": "<p>Typograph data.</p>\n"
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Typograph/typograph-detail.vue",
            "item": "Typograph/typograph-item.vue",
            "icon": "Typograph/typograph-icon.vue"
          }
        }
      },
      "linearGradient": {
        "type": "LinearGradient",
        "name": "linearGradient",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">let</span> layer <span class=\"token operator\">=</span> <span class=\"token function\">CAGradientLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlayer<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLinearGradient <span class=\"token operator\">*</span>linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>\n\nCAGradientLayer <span class=\"token operator\">*</span>layer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CAGradientLayer layer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>layer dez_applyLinearGradient<span class=\"token punctuation\">:</span>linearGradient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "CAGradientLayer",
              "comment": ""
            },
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">LinearGradientView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLinearGradient <span class=\"token operator\">*</span>linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>\n\nDEZLinearGradientView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZLinearGradientView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view dez_applyLinearGradient<span class=\"token punctuation\">:</span>linearGradient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "LinearGradientView",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">val</span> drawable <span class=\"token operator\">=</span> <span class=\"token function\">PaintDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndrawable<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> <span class=\"token function\">RectShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndrawable<span class=\"token punctuation\">.</span>shaderFactory <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>shaderFactory\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> drawable\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LinearGradient</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">PaintDrawable</span> drawable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaintDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrawable<span class=\"token punctuation\">.</span><span class=\"token function\">setShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RectShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrawable<span class=\"token punctuation\">.</span><span class=\"token function\">setShaderFactory</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackground</span><span class=\"token punctuation\">(</span>drawable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "ShaderFactory",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">linear-gradient-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.linear-gradient-background</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> linearGradient<span class=\"token punctuation\">.</span>backgroundStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>LinearGradient</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            },
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$linear-gradient</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--linear-gradient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Variables",
              "comment": "<p>A <code>LinearGradient</code> value can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/linearGradient",
        "comments": {
          "type": "<p>Provides a linear gradient.</p>\n",
          "instance": ""
        },
        "properties": {
          "stops": {
            "id": "/Bindings/linearGradient",
            "name": "stops",
            "type": "GradientStop",
            "properties": {},
            "isPrimitive": false,
            "value": [
              {
                "type": "GradientStop",
                "name": "stops",
                "examples": {},
                "id": "/Bindings/linearGradient/stops",
                "comments": {
                  "type": "<p>Provides a gradient stop.</p>\n",
                  "instance": "<p>LinearGradient data.</p>\n"
                },
                "properties": {
                  "position": {
                    "id": "/Bindings/linearGradient/stops#position",
                    "name": "position",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>GradientStop data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0
                  },
                  "color": {
                    "type": "Color",
                    "name": "color",
                    "examples": {
                      "ios": [
                        {
                          "snippets": [
                            {
                              "lang": "Swift",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                            },
                            {
                              "lang": "Objective-C",
                              "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "UIColor",
                          "comment": ""
                        }
                      ],
                      "android": [
                        {
                          "snippets": [
                            {
                              "lang": "Kotlin",
                              "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                            },
                            {
                              "lang": "Java",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "Color",
                          "comment": ""
                        }
                      ],
                      "web": [
                        {
                          "snippets": [
                            {
                              "lang": "SCSS",
                              "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "CSS",
                              "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                            },
                            {
                              "lang": "JavaScript",
                              "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            }
                          ],
                          "example": "Helpers",
                          "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                        },
                        {
                          "snippets": [
                            {
                              "lang": "SCSS",
                              "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "CSS",
                              "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "JavaScript",
                              "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                            }
                          ],
                          "example": "Variables",
                          "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                        }
                      ]
                    },
                    "id": "/Bindings/linearGradient/stops/color",
                    "comments": {
                      "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                      "instance": "<p>GradientStop data.</p>\n"
                    },
                    "properties": {
                      "h": {
                        "id": "/Bindings/linearGradient/stops/color#h",
                        "name": "h",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0
                      },
                      "s": {
                        "id": "/Bindings/linearGradient/stops/color#s",
                        "name": "s",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      },
                      "l": {
                        "id": "/Bindings/linearGradient/stops/color#l",
                        "name": "l",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0.5
                      },
                      "a": {
                        "id": "/Bindings/linearGradient/stops/color#a",
                        "name": "a",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      }
                    },
                    "value": {},
                    "isPrimitive": false,
                    "references": [],
                    "binding": {
                      "templates": {
                        "detail": "Color/color-detail.vue",
                        "item": "Color/color-item.vue",
                        "icon": "Color/color-icon.vue"
                      }
                    }
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": []
              },
              {
                "type": "GradientStop",
                "name": "stops",
                "examples": {},
                "id": "/Bindings/linearGradient/stops",
                "comments": {
                  "type": "<p>Provides a gradient stop.</p>\n",
                  "instance": "<p>LinearGradient data.</p>\n"
                },
                "properties": {
                  "position": {
                    "id": "/Bindings/linearGradient/stops#position",
                    "name": "position",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>GradientStop data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  },
                  "color": {
                    "type": "Color",
                    "name": "color",
                    "examples": {
                      "ios": [
                        {
                          "snippets": [
                            {
                              "lang": "Swift",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                            },
                            {
                              "lang": "Objective-C",
                              "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "UIColor",
                          "comment": ""
                        }
                      ],
                      "android": [
                        {
                          "snippets": [
                            {
                              "lang": "Kotlin",
                              "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                            },
                            {
                              "lang": "Java",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "Color",
                          "comment": ""
                        }
                      ],
                      "web": [
                        {
                          "snippets": [
                            {
                              "lang": "SCSS",
                              "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "CSS",
                              "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                            },
                            {
                              "lang": "JavaScript",
                              "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            }
                          ],
                          "example": "Helpers",
                          "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                        },
                        {
                          "snippets": [
                            {
                              "lang": "SCSS",
                              "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "CSS",
                              "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "JavaScript",
                              "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                            }
                          ],
                          "example": "Variables",
                          "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                        }
                      ]
                    },
                    "id": "/Bindings/linearGradient/stops/color",
                    "comments": {
                      "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                      "instance": "<p>GradientStop data.</p>\n"
                    },
                    "properties": {
                      "h": {
                        "id": "/Bindings/linearGradient/stops/color#h",
                        "name": "h",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0.6666666666666666
                      },
                      "s": {
                        "id": "/Bindings/linearGradient/stops/color#s",
                        "name": "s",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      },
                      "l": {
                        "id": "/Bindings/linearGradient/stops/color#l",
                        "name": "l",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0.5
                      },
                      "a": {
                        "id": "/Bindings/linearGradient/stops/color#a",
                        "name": "a",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      }
                    },
                    "value": {},
                    "isPrimitive": false,
                    "references": [],
                    "binding": {
                      "templates": {
                        "detail": "Color/color-detail.vue",
                        "item": "Color/color-item.vue",
                        "icon": "Color/color-icon.vue"
                      }
                    }
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": []
              }
            ],
            "comments": {
              "instance": "<p>LinearGradient data.</p>\n"
            }
          },
          "start": {
            "type": "Point2D",
            "name": "start",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CGPoint",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Point2D",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$linear-gradient-start-y-px</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--linear-gradient-start-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>y"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/linearGradient/start",
            "comments": {
              "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
              "instance": "<p>LinearGradient data.</p>\n"
            },
            "properties": {
              "x": {
                "id": "/Bindings/linearGradient/start#x",
                "name": "x",
                "type": "Float",
                "comments": {
                  "instance": "<p>Point data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              },
              "y": {
                "id": "/Bindings/linearGradient/start#y",
                "name": "y",
                "type": "Float",
                "comments": {
                  "instance": "<p>Point data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.5
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Point2D/point2d-detail.vue",
                "item": "Point2D/point2d-item.vue",
                "icon": "Point2D/point2d-icon.vue"
              }
            }
          },
          "end": {
            "type": "Point2D",
            "name": "end",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CGPoint",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Point2D",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$linear-gradient-end-y-px</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--linear-gradient-end-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>y"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/linearGradient/end",
            "comments": {
              "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
              "instance": "<p>LinearGradient data.</p>\n"
            },
            "properties": {
              "x": {
                "id": "/Bindings/linearGradient/end#x",
                "name": "x",
                "type": "Float",
                "comments": {
                  "instance": "<p>Point data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              },
              "y": {
                "id": "/Bindings/linearGradient/end#y",
                "name": "y",
                "type": "Float",
                "comments": {
                  "instance": "<p>Point data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.5
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Point2D/point2d-detail.vue",
                "item": "Point2D/point2d-item.vue",
                "icon": "Point2D/point2d-icon.vue"
              }
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "LinearGradient/linear-gradient-detail.vue",
            "item": "LinearGradient/linear-gradient-item.vue",
            "icon": "LinearGradient/linear-gradient-icon.vue"
          }
        }
      },
      "point": {
        "type": "Point2D",
        "name": "point",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>point<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "CGPoint",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>point\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Point2D",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$point-y-px</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--point-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>y"
                }
              ],
              "example": "Variables",
              "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/point",
        "comments": {
          "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
          "instance": ""
        },
        "properties": {
          "x": {
            "id": "/Bindings/point#x",
            "name": "x",
            "type": "Float",
            "comments": {
              "instance": "<p>Point data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0.5
          },
          "y": {
            "id": "/Bindings/point#y",
            "name": "y",
            "type": "Float",
            "comments": {
              "instance": "<p>Point data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0.5
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Point2D/point2d-detail.vue",
            "item": "Point2D/point2d-item.vue",
            "icon": "Point2D/point2d-icon.vue"
          }
        }
      },
      "size": {
        "type": "Size2D",
        "name": "size",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>cgSize\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGSize <span class=\"token operator\">*</span>size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>cgSize<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "CGSize",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>size\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Size2D</span> size <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Size2D",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">size-size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.size-size</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Size2d</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            }
          ]
        },
        "id": "/Bindings/size",
        "comments": {
          "type": "<p>Provides a two dimensional size.</p>\n<p>Usage: <code>size = Size2D.make(1920, 1080);</code>.</p>\n",
          "instance": ""
        },
        "properties": {
          "width": {
            "id": "/Bindings/size#width",
            "name": "width",
            "type": "Float",
            "comments": {
              "instance": "<p>Size data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 400
          },
          "height": {
            "id": "/Bindings/size#height",
            "name": "height",
            "type": "Float",
            "comments": {
              "instance": "<p>Size data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 300
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Size2D/size2d-detail.vue",
            "item": "Size2D/size2d-item.vue",
            "icon": "Size2D/size2d-icon.vue"
          }
        }
      },
      "shadow": {
        "type": "DropShadow",
        "name": "shadow",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>dropShadow<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZDropShadow <span class=\"token operator\">*</span>dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view<span class=\"token punctuation\">.</span>layer dez_applyDropShadow<span class=\"token punctuation\">:</span>dropShadow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "CALayer",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">DropShadow</span> dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "DropShadow",
              "comment": "<p>While the DropShadow compoment is accessible in the generated Android SDK, no bindings are provided. We recommend defining an &quot;elevation&quot; property that can be consumed by Android clients instead. See <a href=\"https://diez.org/docs/latest/classes/framework_prefabs.panel.html\">Panel</a>.</p>\n"
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">shadow-box-shadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": ".<span class=\"token function\">shadow-box-shadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> shadow<span class=\"token punctuation\">.</span>boxShadowStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>DropShadow</code> can also be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            },
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$shadow}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--shadow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>boxShadow <span class=\"token operator\">=</span> shadow<span class=\"token punctuation\">.</span>boxShadow"
                }
              ],
              "example": "Variables",
              "comment": "<p>A <code>DropShadow</code> value can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/shadow",
        "comments": {
          "type": "<p>Provides a drop shadow.</p>\n",
          "instance": ""
        },
        "properties": {
          "offset": {
            "type": "Point2D",
            "name": "offset",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CGPoint",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>offset\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Point2D",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$shadow-offset-y-px</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--shadow-offset-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> shadow<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>y"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/shadow/offset",
            "comments": {
              "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
              "instance": "<p>DropShadow data.</p>\n"
            },
            "properties": {
              "x": {
                "id": "/Bindings/shadow/offset#x",
                "name": "x",
                "type": "Float",
                "comments": {
                  "instance": "<p>Point data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              },
              "y": {
                "id": "/Bindings/shadow/offset#y",
                "name": "y",
                "type": "Float",
                "comments": {
                  "instance": "<p>Point data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 2
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Point2D/point2d-detail.vue",
                "item": "Point2D/point2d-item.vue",
                "icon": "Point2D/point2d-icon.vue"
              }
            }
          },
          "radius": {
            "id": "/Bindings/shadow#radius",
            "name": "radius",
            "type": "Float",
            "comments": {
              "instance": "<p>DropShadow data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 3
          },
          "color": {
            "type": "Color",
            "name": "color",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "UIColor",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>shadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Color",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> shadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> shadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/shadow/color",
            "comments": {
              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
              "instance": "<p>DropShadow data.</p>\n"
            },
            "properties": {
              "h": {
                "id": "/Bindings/shadow/color#h",
                "name": "h",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.3333333333333333
              },
              "s": {
                "id": "/Bindings/shadow/color#s",
                "name": "s",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              },
              "l": {
                "id": "/Bindings/shadow/color#l",
                "name": "l",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.5
              },
              "a": {
                "id": "/Bindings/shadow/color#a",
                "name": "a",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.5
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Color/color-detail.vue",
                "item": "Color/color-item.vue",
                "icon": "Color/color-icon.vue"
              }
            }
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "DropShadow/drop-shadow-detail.vue",
            "item": "DropShadow/drop-shadow-item.vue",
            "icon": "DropShadow/drop-shadow-icon.vue"
          }
        }
      },
      "fill": {
        "type": "Fill",
        "name": "fill",
        "examples": {},
        "id": "/Bindings/fill",
        "comments": {
          "type": "<p>Describes a fill type.</p>\n",
          "instance": ""
        },
        "properties": {
          "color": {
            "type": "Color",
            "name": "color",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "UIColor",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "Color",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> fill<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> fill<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/fill/color",
            "comments": {
              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
              "instance": "<p>Fill data.</p>\n"
            },
            "properties": {
              "h": {
                "id": "/Bindings/fill/color#h",
                "name": "h",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0
              },
              "s": {
                "id": "/Bindings/fill/color#s",
                "name": "s",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              },
              "l": {
                "id": "/Bindings/fill/color#l",
                "name": "l",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 0.5
              },
              "a": {
                "id": "/Bindings/fill/color#a",
                "name": "a",
                "type": "Float",
                "comments": {
                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 1
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Color/color-detail.vue",
                "item": "Color/color-item.vue",
                "icon": "Color/color-icon.vue"
              }
            }
          },
          "linearGradient": {
            "type": "LinearGradient",
            "name": "linearGradient",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">let</span> layer <span class=\"token operator\">=</span> <span class=\"token function\">CAGradientLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlayer<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLinearGradient <span class=\"token operator\">*</span>linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>\n\nCAGradientLayer <span class=\"token operator\">*</span>layer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CAGradientLayer layer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>layer dez_applyLinearGradient<span class=\"token punctuation\">:</span>linearGradient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CAGradientLayer",
                  "comment": ""
                },
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">LinearGradientView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLinearGradient <span class=\"token operator\">*</span>linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>\n\nDEZLinearGradientView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZLinearGradientView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view dez_applyLinearGradient<span class=\"token punctuation\">:</span>linearGradient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "LinearGradientView",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">val</span> drawable <span class=\"token operator\">=</span> <span class=\"token function\">PaintDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndrawable<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> <span class=\"token function\">RectShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndrawable<span class=\"token punctuation\">.</span>shaderFactory <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>shaderFactory\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> drawable\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LinearGradient</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">PaintDrawable</span> drawable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaintDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrawable<span class=\"token punctuation\">.</span><span class=\"token function\">setShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RectShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrawable<span class=\"token punctuation\">.</span><span class=\"token function\">setShaderFactory</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackground</span><span class=\"token punctuation\">(</span>drawable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "ShaderFactory",
                  "comment": ""
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">fill-linear-gradient-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token selector\">.fill-linear-gradient-background</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>backgroundStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>LinearGradient</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$fill-linear-gradient</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--fill-linear-gradient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>LinearGradient</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/fill/linearGradient",
            "comments": {
              "type": "<p>Provides a linear gradient.</p>\n",
              "instance": "<p>Fill data.</p>\n"
            },
            "properties": {
              "stops": {
                "id": "/Bindings/fill/linearGradient",
                "name": "stops",
                "type": "GradientStop",
                "properties": {},
                "isPrimitive": false,
                "value": [
                  {
                    "type": "GradientStop",
                    "name": "stops",
                    "examples": {},
                    "id": "/Bindings/fill/linearGradient/stops",
                    "comments": {
                      "type": "<p>Provides a gradient stop.</p>\n",
                      "instance": "<p>LinearGradient data.</p>\n"
                    },
                    "properties": {
                      "position": {
                        "id": "/Bindings/fill/linearGradient/stops#position",
                        "name": "position",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>GradientStop data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0
                      },
                      "color": {
                        "type": "Color",
                        "name": "color",
                        "examples": {
                          "ios": [
                            {
                              "snippets": [
                                {
                                  "lang": "Swift",
                                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                                },
                                {
                                  "lang": "Objective-C",
                                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                                }
                              ],
                              "example": "UIColor",
                              "comment": ""
                            }
                          ],
                          "android": [
                            {
                              "snippets": [
                                {
                                  "lang": "Kotlin",
                                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                                },
                                {
                                  "lang": "Java",
                                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                                }
                              ],
                              "example": "Color",
                              "comment": ""
                            }
                          ],
                          "web": [
                            {
                              "snippets": [
                                {
                                  "lang": "SCSS",
                                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                },
                                {
                                  "lang": "CSS",
                                  "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                                },
                                {
                                  "lang": "JavaScript",
                                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                }
                              ],
                              "example": "Helpers",
                              "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                            },
                            {
                              "snippets": [
                                {
                                  "lang": "SCSS",
                                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                                },
                                {
                                  "lang": "CSS",
                                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                },
                                {
                                  "lang": "JavaScript",
                                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                                }
                              ],
                              "example": "Variables",
                              "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                            }
                          ]
                        },
                        "id": "/Bindings/fill/linearGradient/stops/color",
                        "comments": {
                          "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                          "instance": "<p>GradientStop data.</p>\n"
                        },
                        "properties": {
                          "h": {
                            "id": "/Bindings/fill/linearGradient/stops/color#h",
                            "name": "h",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 0
                          },
                          "s": {
                            "id": "/Bindings/fill/linearGradient/stops/color#s",
                            "name": "s",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 0
                          },
                          "l": {
                            "id": "/Bindings/fill/linearGradient/stops/color#l",
                            "name": "l",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 0
                          },
                          "a": {
                            "id": "/Bindings/fill/linearGradient/stops/color#a",
                            "name": "a",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 1
                          }
                        },
                        "value": {},
                        "isPrimitive": false,
                        "references": [],
                        "binding": {
                          "templates": {
                            "detail": "Color/color-detail.vue",
                            "item": "Color/color-item.vue",
                            "icon": "Color/color-icon.vue"
                          }
                        }
                      }
                    },
                    "value": {},
                    "isPrimitive": false,
                    "references": []
                  },
                  {
                    "type": "GradientStop",
                    "name": "stops",
                    "examples": {},
                    "id": "/Bindings/fill/linearGradient/stops",
                    "comments": {
                      "type": "<p>Provides a gradient stop.</p>\n",
                      "instance": "<p>LinearGradient data.</p>\n"
                    },
                    "properties": {
                      "position": {
                        "id": "/Bindings/fill/linearGradient/stops#position",
                        "name": "position",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>GradientStop data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      },
                      "color": {
                        "type": "Color",
                        "name": "color",
                        "examples": {
                          "ios": [
                            {
                              "snippets": [
                                {
                                  "lang": "Swift",
                                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                                },
                                {
                                  "lang": "Objective-C",
                                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                                }
                              ],
                              "example": "UIColor",
                              "comment": ""
                            }
                          ],
                          "android": [
                            {
                              "snippets": [
                                {
                                  "lang": "Kotlin",
                                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                                },
                                {
                                  "lang": "Java",
                                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                                }
                              ],
                              "example": "Color",
                              "comment": ""
                            }
                          ],
                          "web": [
                            {
                              "snippets": [
                                {
                                  "lang": "SCSS",
                                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                },
                                {
                                  "lang": "CSS",
                                  "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                                },
                                {
                                  "lang": "JavaScript",
                                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                }
                              ],
                              "example": "Helpers",
                              "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                            },
                            {
                              "snippets": [
                                {
                                  "lang": "SCSS",
                                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                                },
                                {
                                  "lang": "CSS",
                                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                },
                                {
                                  "lang": "JavaScript",
                                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                                }
                              ],
                              "example": "Variables",
                              "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                            }
                          ]
                        },
                        "id": "/Bindings/fill/linearGradient/stops/color",
                        "comments": {
                          "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                          "instance": "<p>GradientStop data.</p>\n"
                        },
                        "properties": {
                          "h": {
                            "id": "/Bindings/fill/linearGradient/stops/color#h",
                            "name": "h",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 0
                          },
                          "s": {
                            "id": "/Bindings/fill/linearGradient/stops/color#s",
                            "name": "s",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 0
                          },
                          "l": {
                            "id": "/Bindings/fill/linearGradient/stops/color#l",
                            "name": "l",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 1
                          },
                          "a": {
                            "id": "/Bindings/fill/linearGradient/stops/color#a",
                            "name": "a",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 1
                          }
                        },
                        "value": {},
                        "isPrimitive": false,
                        "references": [],
                        "binding": {
                          "templates": {
                            "detail": "Color/color-detail.vue",
                            "item": "Color/color-item.vue",
                            "icon": "Color/color-icon.vue"
                          }
                        }
                      }
                    },
                    "value": {},
                    "isPrimitive": false,
                    "references": []
                  }
                ],
                "comments": {
                  "instance": "<p>LinearGradient data.</p>\n"
                }
              },
              "start": {
                "type": "Point2D",
                "name": "start",
                "examples": {
                  "ios": [
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "CGPoint",
                      "comment": ""
                    }
                  ],
                  "android": [
                    {
                      "snippets": [
                        {
                          "lang": "Kotlin",
                          "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start\n"
                        },
                        {
                          "lang": "Java",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "Point2D",
                      "comment": ""
                    }
                  ],
                  "web": [
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$fill-linear-gradient-start-y-px</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--fill-linear-gradient-start-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>y"
                        }
                      ],
                      "example": "Variables",
                      "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                    }
                  ]
                },
                "id": "/Bindings/fill/linearGradient/start",
                "comments": {
                  "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
                  "instance": "<p>LinearGradient data.</p>\n"
                },
                "properties": {
                  "x": {
                    "id": "/Bindings/fill/linearGradient/start#x",
                    "name": "x",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Point data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0
                  },
                  "y": {
                    "id": "/Bindings/fill/linearGradient/start#y",
                    "name": "y",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Point data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "Point2D/point2d-detail.vue",
                    "item": "Point2D/point2d-item.vue",
                    "icon": "Point2D/point2d-icon.vue"
                  }
                }
              },
              "end": {
                "type": "Point2D",
                "name": "end",
                "examples": {
                  "ios": [
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "CGPoint",
                      "comment": ""
                    }
                  ],
                  "android": [
                    {
                      "snippets": [
                        {
                          "lang": "Kotlin",
                          "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end\n"
                        },
                        {
                          "lang": "Java",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "Point2D",
                      "comment": ""
                    }
                  ],
                  "web": [
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$fill-linear-gradient-end-y-px</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--fill-linear-gradient-end-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> fill<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>y"
                        }
                      ],
                      "example": "Variables",
                      "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                    }
                  ]
                },
                "id": "/Bindings/fill/linearGradient/end",
                "comments": {
                  "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
                  "instance": "<p>LinearGradient data.</p>\n"
                },
                "properties": {
                  "x": {
                    "id": "/Bindings/fill/linearGradient/end#x",
                    "name": "x",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Point data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  },
                  "y": {
                    "id": "/Bindings/fill/linearGradient/end#y",
                    "name": "y",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Point data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "Point2D/point2d-detail.vue",
                    "item": "Point2D/point2d-item.vue",
                    "icon": "Point2D/point2d-icon.vue"
                  }
                }
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "LinearGradient/linear-gradient-detail.vue",
                "item": "LinearGradient/linear-gradient-item.vue",
                "icon": "LinearGradient/linear-gradient-icon.vue"
              }
            }
          },
          "type": {
            "id": "/Bindings/fill#type",
            "name": "type",
            "type": "String",
            "comments": {
              "instance": "<p>Fill data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "Color"
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Fill/fill-detail.vue",
            "item": "Fill/fill-item.vue",
            "icon": "Fill/fill-icon.vue"
          }
        }
      },
      "panel": {
        "type": "Panel",
        "name": "panel",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> panel <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">PanelView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>panel<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZPanel <span class=\"token operator\">*</span>panel <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">;</span>\n\nDEZPanelView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZPanelView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view applyPanel<span class=\"token punctuation\">:</span>panel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "PanelView",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> panel <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel\n\n<span class=\"token comment\">/**\n Add the PanelView to your activity's XML:\n\n&lt;org.diez.StdlibTestStub.PanelView\n    android:id=\"@+id/panelView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n        ...\n&lt;/org.diez.StdlibTestStub.PanelView>\n*/</span>\n\n<span class=\"token keyword\">val</span> panelView<span class=\"token operator\">:</span> PanelView <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to the PanelView.</span>\npanelView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>panel<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Panel</span> panel <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n Add the PanelView to your activity's XML:\n\n&lt;org.diez.StdlibTestStub.PanelView\n    android:id=\"@+id/panelView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n        ...\n&lt;/org.diez.StdlibTestStub.PanelView>\n*/</span>\n\n<span class=\"token class-name\">PanelView</span> panelView <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>panelView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npanelView<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>panel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "PanelView",
              "comment": "<p>PanelView inherits from <a href=\"https://developer.android.com/reference/android/widget/LinearLayout\">LinearLayout</a>.</p>\n"
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">panel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.panel</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Panel</code> can also be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            }
          ]
        },
        "id": "/Bindings/panel",
        "comments": {
          "type": "<p>Provides a simple rectangular panel description.</p>\n",
          "instance": ""
        },
        "properties": {
          "cornerRadius": {
            "id": "/Bindings/panel#cornerRadius",
            "name": "cornerRadius",
            "type": "Float",
            "comments": {
              "instance": "<p>Panel data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 5
          },
          "background": {
            "type": "Fill",
            "name": "background",
            "examples": {},
            "id": "/Bindings/panel/background",
            "comments": {
              "type": "<p>Describes a fill type.</p>\n",
              "instance": "<p>Panel data.</p>\n"
            },
            "properties": {
              "color": {
                "type": "Color",
                "name": "color",
                "examples": {
                  "ios": [
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "UIColor",
                      "comment": ""
                    }
                  ],
                  "android": [
                    {
                      "snippets": [
                        {
                          "lang": "Kotlin",
                          "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                        },
                        {
                          "lang": "Java",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "Color",
                      "comment": ""
                    }
                  ],
                  "web": [
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        }
                      ],
                      "example": "Helpers",
                      "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                    },
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                        }
                      ],
                      "example": "Variables",
                      "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                    }
                  ]
                },
                "id": "/Bindings/panel/background/color",
                "comments": {
                  "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                  "instance": "<p>Fill data.</p>\n"
                },
                "properties": {
                  "h": {
                    "id": "/Bindings/panel/background/color#h",
                    "name": "h",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0.6666666666666666
                  },
                  "s": {
                    "id": "/Bindings/panel/background/color#s",
                    "name": "s",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  },
                  "l": {
                    "id": "/Bindings/panel/background/color#l",
                    "name": "l",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0.5
                  },
                  "a": {
                    "id": "/Bindings/panel/background/color#a",
                    "name": "a",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "Color/color-detail.vue",
                    "item": "Color/color-item.vue",
                    "icon": "Color/color-icon.vue"
                  }
                }
              },
              "linearGradient": {
                "type": "LinearGradient",
                "name": "linearGradient",
                "examples": {
                  "ios": [
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">let</span> layer <span class=\"token operator\">=</span> <span class=\"token function\">CAGradientLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlayer<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">)</span>\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLinearGradient <span class=\"token operator\">*</span>linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>\n\nCAGradientLayer <span class=\"token operator\">*</span>layer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>CAGradientLayer layer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>layer dez_applyLinearGradient<span class=\"token punctuation\">:</span>linearGradient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "CAGradientLayer",
                      "comment": ""
                    },
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">LinearGradientView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">)</span>\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZLinearGradient <span class=\"token operator\">*</span>linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>\n\nDEZLinearGradientView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>DEZLinearGradientView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view dez_applyLinearGradient<span class=\"token punctuation\">:</span>linearGradient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "LinearGradientView",
                      "comment": ""
                    }
                  ],
                  "android": [
                    {
                      "snippets": [
                        {
                          "lang": "Kotlin",
                          "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient\n\n<span class=\"token keyword\">val</span> drawable <span class=\"token operator\">=</span> <span class=\"token function\">PaintDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndrawable<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> <span class=\"token function\">RectShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndrawable<span class=\"token punctuation\">.</span>shaderFactory <span class=\"token operator\">=</span> linearGradient<span class=\"token punctuation\">.</span>shaderFactory\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> drawable\n"
                        },
                        {
                          "lang": "Java",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LinearGradient</span> linearGradient <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">PaintDrawable</span> drawable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaintDrawable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrawable<span class=\"token punctuation\">.</span><span class=\"token function\">setShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RectShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndrawable<span class=\"token punctuation\">.</span><span class=\"token function\">setShaderFactory</span><span class=\"token punctuation\">(</span>linearGradient<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackground</span><span class=\"token punctuation\">(</span>drawable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "ShaderFactory",
                      "comment": ""
                    }
                  ],
                  "web": [
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">panel-background-linear-gradient-background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token selector\">.panel-background-linear-gradient-background</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>backgroundStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        }
                      ],
                      "example": "Helpers",
                      "comment": "<p><code>LinearGradient</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                    },
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$panel-background-linear-gradient</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--panel-background-linear-gradient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">;</span>"
                        }
                      ],
                      "example": "Variables",
                      "comment": "<p>A <code>LinearGradient</code> value can be accessed directly via variables.</p>\n"
                    }
                  ]
                },
                "id": "/Bindings/panel/background/linearGradient",
                "comments": {
                  "type": "<p>Provides a linear gradient.</p>\n",
                  "instance": "<p>Fill data.</p>\n"
                },
                "properties": {
                  "stops": {
                    "id": "/Bindings/panel/background/linearGradient",
                    "name": "stops",
                    "type": "GradientStop",
                    "properties": {},
                    "isPrimitive": false,
                    "value": [
                      {
                        "type": "GradientStop",
                        "name": "stops",
                        "examples": {},
                        "id": "/Bindings/panel/background/linearGradient/stops",
                        "comments": {
                          "type": "<p>Provides a gradient stop.</p>\n",
                          "instance": "<p>LinearGradient data.</p>\n"
                        },
                        "properties": {
                          "position": {
                            "id": "/Bindings/panel/background/linearGradient/stops#position",
                            "name": "position",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>GradientStop data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 0
                          },
                          "color": {
                            "type": "Color",
                            "name": "color",
                            "examples": {
                              "ios": [
                                {
                                  "snippets": [
                                    {
                                      "lang": "Swift",
                                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                                    },
                                    {
                                      "lang": "Objective-C",
                                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                                    }
                                  ],
                                  "example": "UIColor",
                                  "comment": ""
                                }
                              ],
                              "android": [
                                {
                                  "snippets": [
                                    {
                                      "lang": "Kotlin",
                                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                                    },
                                    {
                                      "lang": "Java",
                                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                                    }
                                  ],
                                  "example": "Color",
                                  "comment": ""
                                }
                              ],
                              "web": [
                                {
                                  "snippets": [
                                    {
                                      "lang": "SCSS",
                                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                    },
                                    {
                                      "lang": "CSS",
                                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                                    },
                                    {
                                      "lang": "JavaScript",
                                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                    }
                                  ],
                                  "example": "Helpers",
                                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                                },
                                {
                                  "snippets": [
                                    {
                                      "lang": "SCSS",
                                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                                    },
                                    {
                                      "lang": "CSS",
                                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                    },
                                    {
                                      "lang": "JavaScript",
                                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                                    }
                                  ],
                                  "example": "Variables",
                                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                                }
                              ]
                            },
                            "id": "/Bindings/panel/background/linearGradient/stops/color",
                            "comments": {
                              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                              "instance": "<p>GradientStop data.</p>\n"
                            },
                            "properties": {
                              "h": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#h",
                                "name": "h",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 0
                              },
                              "s": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#s",
                                "name": "s",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 0
                              },
                              "l": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#l",
                                "name": "l",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 0
                              },
                              "a": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#a",
                                "name": "a",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 1
                              }
                            },
                            "value": {},
                            "isPrimitive": false,
                            "references": [],
                            "binding": {
                              "templates": {
                                "detail": "Color/color-detail.vue",
                                "item": "Color/color-item.vue",
                                "icon": "Color/color-icon.vue"
                              }
                            }
                          }
                        },
                        "value": {},
                        "isPrimitive": false,
                        "references": []
                      },
                      {
                        "type": "GradientStop",
                        "name": "stops",
                        "examples": {},
                        "id": "/Bindings/panel/background/linearGradient/stops",
                        "comments": {
                          "type": "<p>Provides a gradient stop.</p>\n",
                          "instance": "<p>LinearGradient data.</p>\n"
                        },
                        "properties": {
                          "position": {
                            "id": "/Bindings/panel/background/linearGradient/stops#position",
                            "name": "position",
                            "type": "Float",
                            "comments": {
                              "instance": "<p>GradientStop data.</p>\n"
                            },
                            "properties": {},
                            "isPrimitive": true,
                            "value": 1
                          },
                          "color": {
                            "type": "Color",
                            "name": "color",
                            "examples": {
                              "ios": [
                                {
                                  "snippets": [
                                    {
                                      "lang": "Swift",
                                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                                    },
                                    {
                                      "lang": "Objective-C",
                                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                                    }
                                  ],
                                  "example": "UIColor",
                                  "comment": ""
                                }
                              ],
                              "android": [
                                {
                                  "snippets": [
                                    {
                                      "lang": "Kotlin",
                                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                                    },
                                    {
                                      "lang": "Java",
                                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStops</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                                    }
                                  ],
                                  "example": "Color",
                                  "comment": ""
                                }
                              ],
                              "web": [
                                {
                                  "snippets": [
                                    {
                                      "lang": "SCSS",
                                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                    },
                                    {
                                      "lang": "CSS",
                                      "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                                    },
                                    {
                                      "lang": "JavaScript",
                                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                    }
                                  ],
                                  "example": "Helpers",
                                  "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                                },
                                {
                                  "snippets": [
                                    {
                                      "lang": "SCSS",
                                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                                    },
                                    {
                                      "lang": "CSS",
                                      "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                                    },
                                    {
                                      "lang": "JavaScript",
                                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>stops<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                                    }
                                  ],
                                  "example": "Variables",
                                  "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                                }
                              ]
                            },
                            "id": "/Bindings/panel/background/linearGradient/stops/color",
                            "comments": {
                              "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                              "instance": "<p>GradientStop data.</p>\n"
                            },
                            "properties": {
                              "h": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#h",
                                "name": "h",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 0
                              },
                              "s": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#s",
                                "name": "s",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 0
                              },
                              "l": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#l",
                                "name": "l",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 1
                              },
                              "a": {
                                "id": "/Bindings/panel/background/linearGradient/stops/color#a",
                                "name": "a",
                                "type": "Float",
                                "comments": {
                                  "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                                },
                                "properties": {},
                                "isPrimitive": true,
                                "value": 1
                              }
                            },
                            "value": {},
                            "isPrimitive": false,
                            "references": [],
                            "binding": {
                              "templates": {
                                "detail": "Color/color-detail.vue",
                                "item": "Color/color-item.vue",
                                "icon": "Color/color-icon.vue"
                              }
                            }
                          }
                        },
                        "value": {},
                        "isPrimitive": false,
                        "references": []
                      }
                    ],
                    "comments": {
                      "instance": "<p>LinearGradient data.</p>\n"
                    }
                  },
                  "start": {
                    "type": "Point2D",
                    "name": "start",
                    "examples": {
                      "ios": [
                        {
                          "snippets": [
                            {
                              "lang": "Swift",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                            },
                            {
                              "lang": "Objective-C",
                              "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "CGPoint",
                          "comment": ""
                        }
                      ],
                      "android": [
                        {
                          "snippets": [
                            {
                              "lang": "Kotlin",
                              "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start\n"
                            },
                            {
                              "lang": "Java",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "Point2D",
                          "comment": ""
                        }
                      ],
                      "web": [
                        {
                          "snippets": [
                            {
                              "lang": "SCSS",
                              "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$panel-background-linear-gradient-start-y-px</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "CSS",
                              "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--panel-background-linear-gradient-start-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "JavaScript",
                              "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>y"
                            }
                          ],
                          "example": "Variables",
                          "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                        }
                      ]
                    },
                    "id": "/Bindings/panel/background/linearGradient/start",
                    "comments": {
                      "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
                      "instance": "<p>LinearGradient data.</p>\n"
                    },
                    "properties": {
                      "x": {
                        "id": "/Bindings/panel/background/linearGradient/start#x",
                        "name": "x",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Point data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0
                      },
                      "y": {
                        "id": "/Bindings/panel/background/linearGradient/start#y",
                        "name": "y",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Point data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 0
                      }
                    },
                    "value": {},
                    "isPrimitive": false,
                    "references": [],
                    "binding": {
                      "templates": {
                        "detail": "Point2D/point2d-detail.vue",
                        "item": "Point2D/point2d-item.vue",
                        "icon": "Point2D/point2d-icon.vue"
                      }
                    }
                  },
                  "end": {
                    "type": "Point2D",
                    "name": "end",
                    "examples": {
                      "ios": [
                        {
                          "snippets": [
                            {
                              "lang": "Swift",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                            },
                            {
                              "lang": "Objective-C",
                              "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "CGPoint",
                          "comment": ""
                        }
                      ],
                      "android": [
                        {
                          "snippets": [
                            {
                              "lang": "Kotlin",
                              "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end\n"
                            },
                            {
                              "lang": "Java",
                              "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                            }
                          ],
                          "example": "Point2D",
                          "comment": ""
                        }
                      ],
                      "web": [
                        {
                          "snippets": [
                            {
                              "lang": "SCSS",
                              "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$panel-background-linear-gradient-end-y-px</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "CSS",
                              "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--panel-background-linear-gradient-end-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                            },
                            {
                              "lang": "JavaScript",
                              "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>background<span class=\"token punctuation\">.</span>linearGradient<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">.</span>y"
                            }
                          ],
                          "example": "Variables",
                          "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                        }
                      ]
                    },
                    "id": "/Bindings/panel/background/linearGradient/end",
                    "comments": {
                      "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
                      "instance": "<p>LinearGradient data.</p>\n"
                    },
                    "properties": {
                      "x": {
                        "id": "/Bindings/panel/background/linearGradient/end#x",
                        "name": "x",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Point data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      },
                      "y": {
                        "id": "/Bindings/panel/background/linearGradient/end#y",
                        "name": "y",
                        "type": "Float",
                        "comments": {
                          "instance": "<p>Point data.</p>\n"
                        },
                        "properties": {},
                        "isPrimitive": true,
                        "value": 1
                      }
                    },
                    "value": {},
                    "isPrimitive": false,
                    "references": [],
                    "binding": {
                      "templates": {
                        "detail": "Point2D/point2d-detail.vue",
                        "item": "Point2D/point2d-item.vue",
                        "icon": "Point2D/point2d-icon.vue"
                      }
                    }
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "LinearGradient/linear-gradient-detail.vue",
                    "item": "LinearGradient/linear-gradient-item.vue",
                    "icon": "LinearGradient/linear-gradient-icon.vue"
                  }
                }
              },
              "type": {
                "id": "/Bindings/panel/background#type",
                "name": "type",
                "type": "String",
                "comments": {
                  "instance": "<p>Fill data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": "Color"
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "Fill/fill-detail.vue",
                "item": "Fill/fill-item.vue",
                "icon": "Fill/fill-icon.vue"
              }
            }
          },
          "dropShadow": {
            "type": "DropShadow",
            "name": "dropShadow",
            "examples": {
              "ios": [
                {
                  "snippets": [
                    {
                      "lang": "Swift",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>dropShadow<span class=\"token punctuation\">)</span>\n"
                    },
                    {
                      "lang": "Objective-C",
                      "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDEZDropShadow <span class=\"token operator\">*</span>dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>view<span class=\"token punctuation\">.</span>layer dez_applyDropShadow<span class=\"token punctuation\">:</span>dropShadow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "CALayer",
                  "comment": ""
                }
              ],
              "android": [
                {
                  "snippets": [
                    {
                      "lang": "Kotlin",
                      "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow\n"
                    },
                    {
                      "lang": "Java",
                      "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">DropShadow</span> dropShadow <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDropShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                    }
                  ],
                  "example": "DropShadow",
                  "comment": "<p>While the DropShadow compoment is accessible in the generated Android SDK, no bindings are provided. We recommend defining an &quot;elevation&quot; property that can be consumed by Android clients instead. See <a href=\"https://diez.org/docs/latest/classes/framework_prefabs.panel.html\">Panel</a>.</p>\n"
                }
              ],
              "web": [
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">panel-drop-shadow-box-shadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": ".<span class=\"token function\">panel-drop-shadow-box-shadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>boxShadowStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    }
                  ],
                  "example": "Helpers",
                  "comment": "<p><code>DropShadow</code> can also be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                },
                {
                  "snippets": [
                    {
                      "lang": "SCSS",
                      "snippet": "<span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span><span class=\"token variable\">#{$panel-drop-shadow}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "CSS",
                      "snippet": "<span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--panel-drop-shadow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                    },
                    {
                      "lang": "JavaScript",
                      "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>boxShadow <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>boxShadow"
                    }
                  ],
                  "example": "Variables",
                  "comment": "<p>A <code>DropShadow</code> value can be accessed directly via variables.</p>\n"
                }
              ]
            },
            "id": "/Bindings/panel/dropShadow",
            "comments": {
              "type": "<p>Provides a drop shadow.</p>\n",
              "instance": "<p>Panel data.</p>\n"
            },
            "properties": {
              "offset": {
                "type": "Point2D",
                "name": "offset",
                "examples": {
                  "ios": [
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>cgPoint\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> point\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nCGPoint <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>cgPoint<span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CGRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> CGPointZero<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "CGPoint",
                      "comment": ""
                    }
                  ],
                  "android": [
                    {
                      "snippets": [
                        {
                          "lang": "Kotlin",
                          "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>offset\n"
                        },
                        {
                          "lang": "Java",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point2D</span> point <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDropShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "Point2D",
                      "comment": ""
                    }
                  ],
                  "web": [
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> #<span class=\"token punctuation\">{</span><span class=\"token variable\">$panel-drop-shadow-offset-y-px</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--panel-drop-shadow-offset-y-px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>y"
                        }
                      ],
                      "example": "Variables",
                      "comment": "<p><code>Point2D</code> values can be accessed directly via variables.</p>\n"
                    }
                  ]
                },
                "id": "/Bindings/panel/dropShadow/offset",
                "comments": {
                  "type": "<p>Provides a two dimensional point.</p>\n<p>Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the\ncontext of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics\nspace, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.</p>\n<p>Usage: <code>point = Point2D.make(0.5, 0.5);</code>.</p>\n",
                  "instance": "<p>DropShadow data.</p>\n"
                },
                "properties": {
                  "x": {
                    "id": "/Bindings/panel/dropShadow/offset#x",
                    "name": "x",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Point data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 2
                  },
                  "y": {
                    "id": "/Bindings/panel/dropShadow/offset#y",
                    "name": "y",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Point data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 3
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "Point2D/point2d-detail.vue",
                    "item": "Point2D/point2d-item.vue",
                    "icon": "Point2D/point2d-icon.vue"
                  }
                }
              },
              "radius": {
                "id": "/Bindings/panel/dropShadow#radius",
                "name": "radius",
                "type": "Float",
                "comments": {
                  "instance": "<p>DropShadow data.</p>\n"
                },
                "properties": {},
                "isPrimitive": true,
                "value": 4
              },
              "color": {
                "type": "Color",
                "name": "color",
                "examples": {
                  "ios": [
                    {
                      "snippets": [
                        {
                          "lang": "Swift",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                        },
                        {
                          "lang": "Objective-C",
                          "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "UIColor",
                      "comment": ""
                    }
                  ],
                  "android": [
                    {
                      "snippets": [
                        {
                          "lang": "Kotlin",
                          "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                        },
                        {
                          "lang": "Java",
                          "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDropShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                        }
                      ],
                      "example": "Color",
                      "comment": ""
                    }
                  ],
                  "web": [
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        }
                      ],
                      "example": "Helpers",
                      "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
                    },
                    {
                      "snippets": [
                        {
                          "lang": "SCSS",
                          "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "CSS",
                          "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                        },
                        {
                          "lang": "JavaScript",
                          "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> panel<span class=\"token punctuation\">.</span>dropShadow<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                        }
                      ],
                      "example": "Variables",
                      "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
                    }
                  ]
                },
                "id": "/Bindings/panel/dropShadow/color",
                "comments": {
                  "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
                  "instance": "<p>DropShadow data.</p>\n"
                },
                "properties": {
                  "h": {
                    "id": "/Bindings/panel/dropShadow/color#h",
                    "name": "h",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0
                  },
                  "s": {
                    "id": "/Bindings/panel/dropShadow/color#s",
                    "name": "s",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  },
                  "l": {
                    "id": "/Bindings/panel/dropShadow/color#l",
                    "name": "l",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 0.5
                  },
                  "a": {
                    "id": "/Bindings/panel/dropShadow/color#a",
                    "name": "a",
                    "type": "Float",
                    "comments": {
                      "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
                    },
                    "properties": {},
                    "isPrimitive": true,
                    "value": 1
                  }
                },
                "value": {},
                "isPrimitive": false,
                "references": [],
                "binding": {
                  "templates": {
                    "detail": "Color/color-detail.vue",
                    "item": "Color/color-item.vue",
                    "icon": "Color/color-icon.vue"
                  }
                }
              }
            },
            "value": {},
            "isPrimitive": false,
            "references": [],
            "binding": {
              "templates": {
                "detail": "DropShadow/drop-shadow-detail.vue",
                "item": "DropShadow/drop-shadow-item.vue",
                "icon": "DropShadow/drop-shadow-icon.vue"
              }
            }
          },
          "elevation": {
            "id": "/Bindings/panel#elevation",
            "name": "elevation",
            "type": "Float",
            "comments": {
              "instance": "<p>Panel data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 6
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Panel/panel-detail.vue",
            "item": "Panel/panel-item.vue",
            "icon": "Panel/panel-icon.vue"
          }
        }
      },
      "color": {
        "type": "Color",
        "name": "color",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIColor",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Color",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            },
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Variables",
              "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/color",
        "comments": {
          "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
          "instance": ""
        },
        "properties": {
          "h": {
            "id": "/Bindings/color#h",
            "name": "h",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "s": {
            "id": "/Bindings/color#s",
            "name": "s",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "l": {
            "id": "/Bindings/color#l",
            "name": "l",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "a": {
            "id": "/Bindings/color#a",
            "name": "a",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 1
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "Color/color-detail.vue",
            "item": "Color/color-item.vue",
            "icon": "Color/color-icon.vue"
          }
        }
      },
      "file": {
        "type": "File",
        "name": "file",
        "examples": {},
        "id": "/Bindings/file",
        "comments": {
          "type": "<p>Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,\nand more. This component is used internally by [[Image]] and [[Font]].</p>\n<p>The compiler may enforce certain restrictions on the <code>type</code> of a <code>File</code> instance.</p>\n<p>Usage: <code>file = new File({src: 'assets/images/file.jpg', type: FileType.Image});</code>.</p>\n",
          "instance": ""
        },
        "properties": {
          "src": {
            "id": "/Bindings/file#src",
            "name": "src",
            "type": "String",
            "comments": {
              "instance": "<p>File data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "assets/SomeFile.txt"
          },
          "type": {
            "id": "/Bindings/file#type",
            "name": "type",
            "type": "String",
            "comments": {
              "instance": "<p>File data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": "raw"
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [],
        "binding": {
          "templates": {
            "detail": "File/file-detail.vue",
            "item": "File/file-item.vue",
            "icon": "File/file-icon.vue"
          }
        }
      },
      "referencedColor": {
        "type": "Color",
        "name": "referencedColor",
        "examples": {
          "ios": [
            {
              "snippets": [
                {
                  "lang": "Swift",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token builtin\">DiezStdlibTestStub</span>\n\n<span class=\"token keyword\">let</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token function\">UIColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">:</span> designLanguage<span class=\"token punctuation\">.</span>referencedColor<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token function\">UIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color\n"
                },
                {
                  "lang": "Objective-C",
                  "snippet": "<span class=\"token operator\">@</span>import DiezStdlibTestStub<span class=\"token punctuation\">;</span>\n\nBindings <span class=\"token operator\">*</span>designLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Bindings alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nUIColor <span class=\"token operator\">*</span>color <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>UIColor dez_colorWithDEZColor<span class=\"token punctuation\">:</span>designLanguage<span class=\"token punctuation\">.</span>referencedColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nUIView <span class=\"token operator\">*</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>UIView alloc<span class=\"token punctuation\">]</span> init<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "UIColor",
              "comment": ""
            }
          ],
          "android": [
            {
              "snippets": [
                {
                  "lang": "Kotlin",
                  "snippet": "<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">val</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token function\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span>referencedColor<span class=\"token punctuation\">.</span>color\n\n<span class=\"token keyword\">val</span> view<span class=\"token operator\">:</span> View <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n"
                },
                {
                  "lang": "Java",
                  "snippet": "<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>diez<span class=\"token punctuation\">.</span>stdlibTestStub</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Bindings</span> designLanguage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bindings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> color <span class=\"token operator\">=</span> designLanguage<span class=\"token punctuation\">.</span><span class=\"token function\">getReferencedColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token comment\">// Get a reference to a View.</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n"
                }
              ],
              "example": "Color",
              "comment": ""
            }
          ],
          "web": [
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token keyword\">@include</span> <span class=\"token function\">referenced-color-background-color</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token selector\">.referenced-color-background-color</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">,</span> referencedColor<span class=\"token punctuation\">.</span>backgroundColorStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Helpers",
              "comment": "<p><code>Color</code> can be used via mixins, pre-made classes, and provided JavaScript functions.</p>\n"
            },
            {
              "snippets": [
                {
                  "lang": "SCSS",
                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$referenced-color</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "CSS",
                  "snippet": "<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--referenced-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"
                },
                {
                  "lang": "JavaScript",
                  "snippet": "myElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> referencedColor<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>"
                }
              ],
              "example": "Variables",
              "comment": "<p>A <code>Color</code> value can be accessed directly via variables.</p>\n"
            }
          ]
        },
        "id": "/Bindings/referencedColor",
        "comments": {
          "type": "<p>A component encapsulating color, including alpha transparency.</p>\n<p>You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and\n[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.</p>\n",
          "instance": "<p>Referenced color value</p>\n"
        },
        "properties": {
          "h": {
            "id": "/Bindings/referencedColor#h",
            "name": "h",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "s": {
            "id": "/Bindings/referencedColor#s",
            "name": "s",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0
          },
          "l": {
            "id": "/Bindings/referencedColor#l",
            "name": "l",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 0.06274509803921569
          },
          "a": {
            "id": "/Bindings/referencedColor#a",
            "name": "a",
            "type": "Float",
            "comments": {
              "instance": "<p>Provides simple hue-saturation-lightness-alpha color data.</p>\n"
            },
            "properties": {},
            "isPrimitive": true,
            "value": 1
          }
        },
        "value": {},
        "isPrimitive": false,
        "references": [
          {
            "path": [],
            "parentType": "References",
            "name": "referencedColor"
          }
        ],
        "binding": {
          "templates": {
            "detail": "Color/color-detail.vue",
            "item": "Color/color-item.vue",
            "icon": "Color/color-icon.vue"
          }
        }
      }
    },
    "value": {},
    "isPrimitive": false
  }
]
