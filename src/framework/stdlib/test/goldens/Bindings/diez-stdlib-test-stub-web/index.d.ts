// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

export declare class RootComponent {}

export declare class Diez<T extends RootComponent> {
  constructor (baseClass: new () => T);
  readonly component: T;
  static applyHTMLExtensions(): void;
  attach(subscriber: (component: T) => void): void;
}

export declare class File {
  /**
   * The URL of the `File`
   */
  url: string;
}

export declare class Size2D {
  /**
   * The width of the size.
   */
  width: number;
  /**
   * The height of the size.
   */
  height: number;
  /**
   * CSS declarations for the `width` and `height` CSS properties.
   */
  style: {width: string, height: string};
  /**
   * CSS declarations for the `background-size` CSS property.
   */
  backgroundSizeStyle: {backgroundSize: string};
}

export declare class Image {
  /**
   * The URL of the `Image`
   */
  url: string;
  /**
   * CSS declarations for the `background-image` CSS property.
   */
  backgroundImageStyle: {backgroundImage: string};
}

export declare class Lottie {
  /**
   * Mounts a `Lottie` animation on the given element.
   */
  mount(ref: any): void;
}

declare global {
  interface HTMLElement {
    /**
     * Mounts a Lottie animation on the element.
     *
     * You *must* have called `Diez.applyHTMLExtensions()` at least once to use this method.
     */
    mountLottie(lottieComponent: Lottie): void;
  }
}

/**
 * A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
 *
 */
export declare class Font {
  /**
   * Font data.
   *
   * assets/SomeFont.ttf
   */
  file: File;
  /**
   * Font data.
   *
   * SomeFont
   */
  name: string;
  /**
   * Font data.
   *
   * [Verdana,serif]
   */
  fallbacks: string[];
  /**
   * Font data.
   *
   * 700
   */
  weight: number;
  /**
   * Font data.
   *
   * normal
   */
  style: string;
}

export declare class Color {
  /**
   * The raw color, suitable for usage in CSS and HTML.
   */
  color: string;
  /**
   * CSS declarations for the `color` CSS property.
   */
  colorStyle: {color: string};
  /**
   * CSS declarations for the `background-color` CSS property.
   */
  backgroundColorStyle: {backgroundColor: string};
  /**
   * CSS declarations for the `border-color` CSS property.
   */
  borderColorStyle: {borderColor: string};
  /**
   * CSS declarations for the `outline-color` CSS property.
   */
  outlineColorStyle: {outlineColor: string};
}

export declare class Typograph {
  /**
   * An `Object` with CSS values for this `Typograph`.
   */
  style: {
    color: string,
    fontSize: string,
    fontFamily: string,
    fontWeight: number,
    fontStyle: string,
    lineHeight?: string,
    letterSpacing: number,
    textAlign: "start" | "left" | "right" | "center",
    textDecoration: string,
  };
  /**
   * Applies the `Typograph` CSS styles to the given HTMLElement.
   */
  applyStyle(ref: HTMLElement): void;
}

declare global {
  interface HTMLElement {
    /**
     * Applies a Diez Typograph definition to the element.
     *
     * You *must* have called `Diez.applyHTMLExtensions()` at least once to use this method.
     */
    applyTypograph(typograph: Typograph): void;
  }
}

/**
 * Provides a gradient stop.
 *
 */
export declare class GradientStop {
  /**
   * GradientStop data.
   *
   * 1
   */
  position: number;
  /**
   * GradientStop data.
   *
   * hsla(0.67, 1, 0.5, 1)
   */
  color: Color;
}

/**
 * Provides a two dimensional point.
 * 
 * Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the
 * context of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics
 * space, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.
 * 
 * Usage: `point = Point2D.make(0.5, 0.5);`.
 *
 */
export declare class Point2D {
  /**
   * Point data.
   *
   * 0
   */
  x: number;
  /**
   * Point data.
   *
   * 0.5
   */
  y: number;
}

export declare class LinearGradient {
  /**
   * The CSS linear-gradient representation of the `LinearGradient`.
   * @example
   * linear-gradient(45deg, hsla(0, 0%, 100%, 1) 0%, hsla(0, 0%, 0%, 1) 100%)
   */
  linearGradient: string;
  /**
   * CSS declarations for the `background-image` CSS property.
   */
  backgroundImageStyle: {backgroundImage: string};
  /**
   * CSS declarations for the `background` CSS property.
   */
  backgroundStyle: {background: string};
}

export declare class DropShadow {
  /**
   * The CSS box-shadow representation of the `DropShadow`.
   * @example
   * 0px 1px 16px rgba(0, 0, 16, .4)
   */
  boxShadow: string;
  /**
   * The CSS text-shadow representation of the `DropShadow`.
   * @example
   * 0px 1px 16px rgba(0, 0, 16, .4)
   */
  textShadow: string;
  /**
   * The CSS filter representation of the `DropShadow`.
   * @example
   * drop-shadow(0px 1px 16px rgba(0, 0, 16, .4))
   */
  filter: string;
  /**
   * CSS declarations for the `box-shadow` CSS property.
   */
  boxShadowStyle: {boxShadow: string};
  /**
   * CSS declarations for the `text-shadow` CSS property.
   */
  textShadowStyle: {textShadow: string};
  /**
   * CSS declarations for the `filter` CSS property.
   */
  filterStyle: {filter: string};
}

/**
 * Describes a fill type.
 *
 */
export declare class Fill {
  /**
   * Fill data.
   *
   * hsla(0, 1, 0.5, 1)
   */
  color: Color;
  /**
   * Fill data.
   *
   * start [0, 0], end [1, 1], stops: [hsla(0, 0, 0, 1) at 0,hsla(0, 0, 1, 1) at 1]
   */
  linearGradient: LinearGradient;
  /**
   * Fill data.
   *
   * Color
   */
  type: string;
}

export declare class Panel {
  /**
   * CSS declarations for the panel.
   */
  style: {
    background: string,
    boxShadow: string,
    borderRadius: string,
  };
}

export declare class Bindings extends RootComponent {
  /**
   * assets/image with spaces.jpg (246 x 246)
   */
  image: Image;
  /**
   * - file: `assets/lottie.json`
   * - loop: `true`
   * - autoplay: `true`
   */
  lottie: Lottie;
  /**
   * - font: `SomeFont, 700, normal`
   * - fontSize: `50`
   * - color: `hsla(0.17, 1, 0.5, 1)`
   * - iosTextStyle: `body`
   * - shouldScale: `false`
   * - lineHeight: `-1`
   * - letterSpacing: `0`
   * - alignment: `natural`
   * - decoration: `[]`
   */
  typograph: Typograph;
  /**
   * - font: `SomeFont, 700, normal`
   * - fontSize: `50`
   * - color: `hsla(0, 0, 0, 1)`
   * - iosTextStyle: `body`
   * - shouldScale: `false`
   * - lineHeight: `100`
   * - letterSpacing: `10`
   * - alignment: `natural`
   * - decoration: `[underline,strikethrough]`
   */
  tallTypograph: Typograph;
  /**
   * start [0, 0.5], end [1, 0.5], stops: [hsla(0, 1, 0.5, 1) at 0,hsla(0.67, 1, 0.5, 1) at 1]
   */
  linearGradient: LinearGradient;
  /**
   * [0.5, 0.5]
   */
  point: Point2D;
  /**
   * (400 x 300)
   */
  size: Size2D;
  /**
   * - offset: `[1, 2]`
   * - radius: `3`
   * - color: `hsla(0.33, 1, 0.5, 0.5)`
   */
  shadow: DropShadow;
  /**
   * - color: `hsla(0, 1, 0.5, 1)`
   * - linearGradient: `start [0, 0], end [1, 1], stops: [hsla(0, 0, 0, 1) at 0,hsla(0, 0, 1, 1) at 1]`
   * - type: `Color`
   */
  fill: Fill;
  /**
   * - cornerRadius: `5`
   * - background: ``
   * - dropShadow: ``
   * - elevation: `6`
   */
  panel: Panel;
  /**
   * hsla(0, 0, 0, 1)
   */
  color: Color;
  /**
   * assets/SomeFile.txt
   */
  file: File;
  /**
   * Referenced color value
   *
   * `References.referencedColor` ( hsla(0, 0, 0.06, 1) )
   */
  referencedColor: Color;
}

