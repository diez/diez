// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

package org.diez.stdlibTestStub

import android.net.Uri
import java.net.URL

/**
 * Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,
 * and more. This component is used internally by [[Image]] and [[Font]].
 * 
 * The compiler may enforce certain restrictions on the `type` of a `File` instance.
 * 
 * Usage: `file = new File({src: 'assets/images/file.jpg', type: FileType.Image});`.
 *
 */
data class File(
    /**
     * File data.
     *
     * assets/image%20with%20spaces.jpg
     */
    val src: String,
    /**
     * File data.
     *
     * image
     */
    val type: String
) {
    companion object {}

    val uri: Uri
        get() {
            return Uri.parse(this.canonicalURL)
        }

    val url: URL
        get() {
            return URL(this.canonicalURL)
        }

    internal val resourceName: String
        get() {
            return extensionReplacer.replace(fileReplacer.replace(src.toLowerCase(), "_"), "$1")
        }

    internal val resourceId: Int
        get() {
            return Environment.resources.getIdentifier(
                resourceName,
                type,
                Environment.packageName
            )
        }

    internal val canonicalURL: String
        get() {
            if (Environment.isHot) {
                return "${Environment.serverUrl}/$src"
            }

            return "android.resource://${Environment.packageName}/$resourcePath"
        }

    internal val websafeURL: String
        get() {
            if (Environment.isHot) {
                return canonicalURL
            }

            return "file:///android_res/$resourcePath"
        }

    private val resourcePath: String
        get() {
            return "$type/$resourceName"
        }
}

private val extensionReplacer = """(.+)(_.+)""".toRegex()
private val fileReplacer = """[^a-z0-9_]""".toRegex()
