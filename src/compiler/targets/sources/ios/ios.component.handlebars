import Foundation
{{#if isRootComponent}}
import UIKit
{{else}}
import CoreGraphics
{{/if}}
{{> comment .}}
@objc(DEZ{{{type}}})
{{#if isRootComponent}}
public final class {{{type}}}: NSObject, RootComponent {
{{else}}
public final class {{{type}}}: NSObject, Decodable {
{{/if}}
    {{#each properties}}
    {{> comment .}}
    @objc public internal(set) var {{this.name}}: {{this.type}}
    {{/each}}
    {{#if hasProperties}}
    {{#if fixed}}

    convenience {{#if isRootComponent}}public {{/if}}override init() {
        self.init(
            {{#each properties}}
            {{this.name}}: {{{this.initializer}}}{{#unless @last}},{{/unless}}
            {{/each}}
        )
    }
    {{/if}}

    init(
        {{#each properties}}
        {{this.name}}: {{{this.type}}}{{#unless @last}},{{/unless}}
        {{/each}}
    ) {
        {{#each properties}}
        self.{{this.name}} = {{{this.name}}}
        {{/each}}
    }
    {{else}}
    public override init() {}
    {{/if}}
    {{#if isRootComponent}}

    public static let name = "{{{type}}}"
    {{/if}}
}

extension {{{type}}}: ReflectedCustomStringConvertible {
    public override var description: String {
        return reflectedDescription
    }
}
{{#if isRootComponent}}

/// This is only intended to be used by Objective-C consumers.
/// In Swift use Diez<{{{type}}}>.
@available(swift, obsoleted: 0.0.1)
@objc(DEZDiez{{{type}}})
public final class DiezBridged{{{type}}}: NSObject {
    @objc public init(view: UIView) {
        diez = Diez(view: view)

        super.init()
    }

    /**
     Registers the provided block for updates to the {{{type}}}.

     The provided closure is called synchronously when this function is called.

     If in [hot mode](x-source-tag://Diez), this closure will also be called whenever changes occur to the
     component.

     - Parameter subscriber: The block to be called when the component updates.
     */
    @objc public func attach(_ subscriber: @escaping ({{{type}}}?, NSError?) -> Void) {
        diez.attach { result in
            switch result {
            case .success(let component):
                subscriber(component, nil)
            case .failure(let error):
                subscriber(nil, error.asNSError)
            }
        }
    }

    private let diez: Diez<{{{type}}}>
}
{{/if}}
